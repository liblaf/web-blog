import{_ as n,X as s,Y as a,a1 as e}from"./framework-9435e890.js";const o={},p=e(`<h6 id="asm-semaphore-h-not-found" tabindex="-1"><a class="header-anchor" href="#asm-semaphore-h-not-found" aria-hidden="true">#</a> &lt;asm/semaphore.h&gt; (not found)</h6><p>The include file that defines semaphores and the operations on them.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">DECLARE_MUTEX</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">DECLARE_MUTEX_LOCKED</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Two macros for declaring and initializing a semaphore used in mutual exclusion mode.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_MUTEX</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init_MUTEX_LOCKED</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>These two functions can be used to initialize a semaphore at runtime.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_interruptible</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lock and unlock a semaphore. <code>down</code> puts the calling process into an uninterruptible sleep if need be; <code>down_interruptible</code>, instead, can be interrupted by a signal. <code>down_trylock</code> does not sleep; instead, it returns immediately if the semaphore is unavailable. Code that locks a semaphore must eventually unlock it with <code>up</code>.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span><span class="token punctuation">;</span>
<span class="token function">init_rwsem</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The reader/writer version of semaphores and the function that initializes it.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_read_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining and releasing read access to a reader/writer semaphore.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">down_write_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">up_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">downgrade_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for managing write access to a reader/writer semaphore.</p><h6 id="linux-completion-h" tabindex="-1"><a class="header-anchor" href="#linux-completion-h" aria-hidden="true">#</a> &lt;linux/completion.h&gt;</h6><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">DECLARE_COMPLETION</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">init_completion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">INIT_COMPLETION</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The include file describing the Linux completion mechanism, and the normal methods for initializing completions. <code>INIT_COMPLETION</code> should be used only to reinitialize a completion that has been previously used.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wait_for_completion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Wait for a completion event to be signaled.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">complete_all</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Signal a completion event. <code>complete</code> wakes, at most, one waiting thread, while <code>complete_all</code> wakes all waiters.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">complete_and_exit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">long</span> retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Signals a completion event by calling <code>complete</code> and calls <code>exit</code> for the current thread.</p><h6 id="linux-spinlock-h" tabindex="-1"><a class="header-anchor" href="#linux-spinlock-h" aria-hidden="true">#</a> &lt;linux/spinlock.h&gt;</h6><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">spinlock_t</span> lock <span class="token operator">=</span> SPIN_LOCK_UNLOCKED<span class="token punctuation">;</span>
<span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The include file defining the spinlock interface and the two ways of initializing locks.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_lock_irq</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_lock_bh</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The various ways of locking a spinlock and, possibly, disabling interrupts.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">spin_trylock</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">spin_trylock_bh</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Non-spinning versions of the above functions; these return 0 in case of failure to obtain the lock, nonzero otherwise.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_unlock_irq</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_unlock_bh</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The corresponding ways of releasing a spinlock.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">rwlock_t</span> lock <span class="token operator">=</span> RW_LOCK_UNLOCKED<span class="token punctuation">;</span>
<span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The two ways of initializing reader/writer locks.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_lock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_lock_irqsave</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_lock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_lock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining read access to a reader/writer lock.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_unlock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_unlock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_unlock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for releasing read access to a reader/writer spinlock.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">write_lock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_lock_irqsave</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_lock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_lock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining write access to a reader/writer lock.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">write_unlock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_unlock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_unlock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for releasing write access to a reader/writer spinlock.</p><h6 id="linux-rwsem-h" tabindex="-1"><a class="header-anchor" href="#linux-rwsem-h" aria-hidden="true">#</a> &lt;linux/rwsem.h&gt;</h6><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span><span class="token punctuation">;</span>
<span class="token function">init_rwsem</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The reader/writer version of semaphores and the function that initializes it.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_read_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining and releasing read access to a reader/writer semaphore.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">down_write_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">up_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">downgrade_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for managing write access to a reader/writer semaphore.</p>`,49),t=[p];function c(l,i){return s(),a("div",null,t)}const u=n(o,[["render",c],["__file","index.html.vue"]]);export{u as default};
