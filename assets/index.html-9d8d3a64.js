import{_ as t,X as d,Y as e,a1 as r}from"./framework-9435e890.js";const a={},i=r('<h2 id="优化策略" tabindex="-1"><a class="header-anchor" href="#优化策略" aria-hidden="true">#</a> 优化策略</h2><h3 id="warp-divergence" tabindex="-1"><a class="header-anchor" href="#warp-divergence" aria-hidden="true">#</a> warp divergence</h3><p>ref 实现中的 warp divergence 主要是因为将不同行归入一个 warp 计算, 而不同行的 NNZ 可能有很大差异, 产生 warp divergence. 因此, 只要避免将不同行划入同一 warp 即可. 因此, 令 <code>block.x = 1</code>, 使每个 thread block 至多处理一行数据.</p><p>如图中 ref 与 phase_1 对比, 提升有限.</p><h3 id="shared-memory" tabindex="-1"><a class="header-anchor" href="#shared-memory" aria-hidden="true">#</a> shared memory</h3><p>在 SpMM 中, 稀疏矩阵的一个元素代表了对于稠密矩阵的一行的访问. 因此可以将稀疏矩阵的一部分缓存在 shared memory 中, 以减少重复从 global memory 中读取稀疏矩阵.</p><p>如图中 phase_2, 效果拔群.</p><h3 id="load-imbalance" tabindex="-1"><a class="header-anchor" href="#load-imbalance" aria-hidden="true">#</a> load imbalance</h3><p>稀疏矩阵不同行的 NNZ 可能有很大差异, 因此考虑将较大的行进一步划分, 将稀疏矩阵的一行分割为多个 <code>Task</code>, 分配到多个线程中处理, 再使用 <code>atomicAdd</code> 归约. 为了减少同一行被连续线程处理导致 atomic 冲突频繁, 我们可以将 <code>Task</code> 打乱.</p><p>如图中 opt, 获得了进一步提升.</p><figure><img src="https://res.cloudinary.com/liblaf/image/upload/v1677215418/2023/02/24/20230224-1677215415.png" alt="opt" tabindex="0" loading="lazy"><figcaption>opt</figcaption></figure><h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h2><figure><img src="https://res.cloudinary.com/liblaf/image/upload/v1677215436/2023/02/24/20230224-1677215434.png" alt="speedup" tabindex="0" loading="lazy"><figcaption>speedup</figcaption></figure><h3 id="klen-32" tabindex="-1"><a class="header-anchor" href="#klen-32" aria-hidden="true">#</a> <code>kLen = 32</code></h3><table><thead><tr><th>Dataset</th><th>ref time</th><th>opt time</th><th>speedup</th></tr></thead><tbody><tr><td>arxiv</td><td>0.000772655</td><td>0.000382011</td><td>2.0225988256882657</td></tr><tr><td>collab</td><td>0.00133105</td><td>0.000747854</td><td>1.7798260088199034</td></tr><tr><td>citation</td><td>0.0164488</td><td>0.0109764</td><td>1.4985605480849822</td></tr><tr><td>ddi</td><td>0.000705377</td><td>0.000233554</td><td>3.0201880507291676</td></tr><tr><td>protein</td><td>0.0246445</td><td>0.0136007</td><td>1.8120023234098244</td></tr><tr><td>ppa</td><td>0.0183861</td><td>0.0103118</td><td>1.783015574390504</td></tr><tr><td>reddit.dgl</td><td>0.0486643</td><td>0.0211276</td><td>2.303352013479998</td></tr><tr><td>products</td><td>0.0558278</td><td>0.0334461</td><td>1.669187139905699</td></tr><tr><td>youtube</td><td>0.00364472</td><td>0.00274129</td><td>1.3295638184942127</td></tr><tr><td>amazon_cogdl</td><td>0.125264</td><td>0.0522025</td><td>2.399578564245007</td></tr><tr><td>yelp</td><td>0.00658028</td><td>0.00378241</td><td>1.7397056374110687</td></tr><tr><td>wikikg2</td><td>0.00714436</td><td>0.00485393</td><td>1.4718712465981172</td></tr><tr><td>am</td><td>0.00374</td><td>0.00226176</td><td>1.6535795132993776</td></tr></tbody></table><h3 id="klen-256" tabindex="-1"><a class="header-anchor" href="#klen-256" aria-hidden="true">#</a> <code>kLen = 256</code></h3><table><thead><tr><th>Dataset</th><th>ref time</th><th>opt time</th><th>speedup</th></tr></thead><tbody><tr><td>arxiv</td><td>0.0030007</td><td>0.00297216</td><td>1.0096024440137812</td></tr><tr><td>collab</td><td>0.00520226</td><td>0.00587065</td><td>0.8861471898341752</td></tr><tr><td>citation</td><td>0.0788706</td><td>0.119014</td><td>0.6627001865326768</td></tr><tr><td>ddi</td><td>0.00156062</td><td>0.00159544</td><td>0.978175299603871</td></tr><tr><td>protein</td><td>0.0808061</td><td>0.112618</td><td>0.7175238416594151</td></tr><tr><td>ppa</td><td>0.0849794</td><td>0.0839621</td><td>1.0121161809911854</td></tr><tr><td>reddit.dgl</td><td>0.202341</td><td>0.174222</td><td>1.1613975272927644</td></tr><tr><td>products</td><td>0.258469</td><td>0.274967</td><td>0.9400000727360011</td></tr><tr><td>youtube</td><td>0.0144181</td><td>0.0220068</td><td>0.6551656760637621</td></tr><tr><td>amazon_cogdl</td><td>0.517086</td><td>0.424054</td><td>1.2193871535229006</td></tr><tr><td>yelp</td><td>0.029976</td><td>0.0305569</td><td>0.980989563731923</td></tr><tr><td>wikikg2</td><td>0.0166503</td><td>0.0387169</td><td>0.4300525093692935</td></tr><tr><td>am</td><td>0.0134264</td><td>0.0182773</td><td>0.7345942781483041</td></tr></tbody></table>',17),o=[i];function h(c,n){return d(),e("div",null,o)}const l=t(a,[["render",h],["__file","index.html.vue"]]);export{l as default};
