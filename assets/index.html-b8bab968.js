import{_ as c,X as a,Y as t,Z as n,a0 as s,$ as o,a1 as p,E as l}from"./framework-9435e890.js";const i={},r=p(`<h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h2><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>v0</th><th>v1</th><th>v2</th><th>v3</th><th>v4</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>xxxxxxxxxx6 1void a_plus_b_intrinsic(float* a, float* b, float* c, int n) {2  for (int i = 0; i &lt; n; i += 8) {3    _mm256_store_ps(4        c + i, _mm256_add_ps(_mm256_load_ps(a + i), _mm256_load_ps(b + i)));5 }6}c++</td><td>1.</td><td>1.</td><td>1.</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>1.82738226</td><td>1.83557525</td><td>1.8772568</td><td>1.86270894</td><td>1.67925379</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3.05696721</td><td>3.17540441</td><td>3.37059297</td><td>3.39672385</td><td>2.3387731</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>5.15212684</td><td>5.59405831</td><td>6.03427353</td><td>6.15270254</td><td>3.29768106</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>7.65590815</td><td>8.91877194</td><td>9.65970998</td><td>10.31895407</td><td>4.39598177</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>10.63745468</td><td>12.91174115</td><td>14.70125847</td><td>15.67950831</td><td>5.01147717</td></tr></tbody></table><h2 id="v0" tabindex="-1"><a class="header-anchor" href="#v0" aria-hidden="true">#</a> v0</h2><p><code>AllReduceBitwiseAnd</code> + Blocking Communication + Naive Merge</p><p>每轮归并后 <code>AllReduce</code> 检查是否已为有序.</p><h3 id="allreducebitwiseand" tabindex="-1"><a class="header-anchor" href="#allreducebitwiseand" aria-hidden="true">#</a> <code>AllReduceBitwiseAnd</code></h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0 -&gt; 1 -&gt; ... -&gt; (nprocs - 1) -&gt; 0 # Tag 1
0 -&gt; 1 -&gt; ... -&gt; (nprocs - 2) # Tag 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code" aria-hidden="true">#</a> Source Code</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">AllReduceBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> sendbuf<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">int</span> current_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sendbuf<span class="token punctuation">;</span>
  <span class="token keyword">int</span> succ_rank <span class="token operator">=</span> <span class="token punctuation">(</span>current_rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> nprocs<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pred_rank <span class="token operator">=</span> <span class="token punctuation">(</span>current_rank <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> nprocs<span class="token punctuation">)</span> <span class="token operator">%</span> nprocs<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*source=*/</span>pred_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">,</span>
             <span class="token comment">/*status=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>succ_rank <span class="token operator">!=</span> nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
               <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> recvbuf<span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>recvbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*source=*/</span>pred_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">,</span>
             <span class="token comment">/*status=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendbuf <span class="token operator">&amp;=</span> recvbuf<span class="token punctuation">;</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_rank <span class="token operator">!=</span> nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
               <span class="token comment">/*source=*/</span>pred_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">,</span>
               <span class="token comment">/*status=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>succ_rank <span class="token operator">!=</span> nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
                 <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sendbuf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>out_of_range<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> merged_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// even stage</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">AllReduceBitwiseAnd</span><span class="token punctuation">(</span>sorted<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> neighbor_rank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t neighbor_block_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> right_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> right_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> left_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> left_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// no neighbor</span>
      sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    MPI_Status status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no need to merge</span>
        sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// neighbor_rank == right_rank</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no need to merge</span>
        sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                 <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>neighbor_block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t skip_count <span class="token operator">=</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token operator">?</span> neighbor_block_len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>j<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>k<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span>
           l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> merged_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merged_data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-1" tabindex="-1"><a class="header-anchor" href="#performance-1" aria-hidden="true">#</a> Performance</h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12526.773000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6855.037000 ms</td><td>1.82738226</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>4097.778000 ms</td><td>3.05696721</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2431.379000 ms</td><td>5.15212684</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1636.223000 ms</td><td>7.65590815</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>1177.610000 ms</td><td>10.63745468</td></tr></tbody></table><h2 id="v1" tabindex="-1"><a class="header-anchor" href="#v1" aria-hidden="true">#</a> v1</h2><p>Loop <code>nprocs</code> times + Blocking Communication + Naive Merge</p><p>节约 <code>AllReduce</code> 的时间, 进行 <code>nprocs</code> 轮排序.</p><h3 id="proof-of-correctness" tabindex="-1"><a class="header-anchor" href="#proof-of-correctness" aria-hidden="true">#</a> Proof of Correctness</h3>`,15),u={href:"https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort#Proof_of_correctness",target:"_blank",rel:"noopener noreferrer"},k=n("h4",{id:"claim",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#claim","aria-hidden":"true"},"#"),s(" Claim")],-1),d={class:"MathJax",jax:"SVG",style:{position:"relative"}},m={style:{"vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.57ex",height:"1.437ex",role:"img",focusable:"false",viewBox:"0 -441 4229.8 635","aria-hidden":"true"},v=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(965.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1410.2,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(2748.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3193.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g>',1),b=[v],h=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("msub",null,[n("mi",null,"a"),n("mn",null,"1")]),n("mo",null,","),n("mo",null,"⋯"),n("mo",null,","),n("msub",null,[n("mi",null,"a"),n("mi",null,"n")])])],-1),g=n("code",null,"<",-1),_={class:"MathJax",jax:"SVG",style:{position:"relative"}},T={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},w=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"})])])],-1),Q=[w],y=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n")])],-1),f=p('<h4 id="proof" tabindex="-1"><a class="header-anchor" href="#proof" aria-hidden="true">#</a> Proof</h4><p>This proof is based loosely on one by Thomas Worsch.<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p>',2),M=p('<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>',2),x={class:"MathJax",jax:"SVG",style:{position:"relative"}},L={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.937ex",height:"1.355ex",role:"img",focusable:"false",viewBox:"0 -441 856 598.8","aria-hidden":"true"},I=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g>',1),H=[I],P=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("msub",null,[n("mi",null,"a"),n("mi",null,"i")])])],-1),C={class:"MathJax",jax:"SVG",style:{position:"relative"}},S={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.054ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 466 453","aria-hidden":"true"},z=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D452",d:"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"})])])],-1),j=[z],O=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"e")])],-1),Z={class:"MathJax",jax:"SVG",style:{position:"relative"}},D={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.054ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 466 453","aria-hidden":"true"},q=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D452",d:"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"})])])],-1),V=[q],B=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"e")])],-1),R={class:"MathJax",jax:"SVG",style:{position:"relative"}},A={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.177ex",height:"1.505ex",role:"img",focusable:"false",viewBox:"0 -583 2288.4 665","aria-hidden":"true"},G=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g>',1),N=[G],W=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e")])],-1),E={class:"MathJax",jax:"SVG",style:{position:"relative"}},F={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.074ex",height:"1.692ex",role:"img",focusable:"false",viewBox:"0 -666 4010.9 748","aria-hidden":"true"},J=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2510.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3510.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),U=[J],$=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mn",null,"1")])],-1),K={class:"MathJax",jax:"SVG",style:{position:"relative"}},X={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.951ex",height:"1.692ex",role:"img",focusable:"false",viewBox:"0 -666 2188.4 748","aria-hidden":"true"},Y=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(688.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1688.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),nn=[Y],sn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"e"),n("mo",null,"−"),n("mn",null,"1")])],-1),an={class:"MathJax",jax:"SVG",style:{position:"relative"}},tn={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.254ex",height:"1.692ex",role:"img",focusable:"false",viewBox:"0 -666 2322.4 748","aria-hidden":"true"},pn=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),en=[pn],on=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")])],-1),cn={class:"MathJax",jax:"SVG",style:{position:"relative"}},ln={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"24.686ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 10911.3 1000","aria-hidden":"true"},rn=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1211.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2211.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2711.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3322.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(4322.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4711.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(5400.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6400.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6900.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7567.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(8622.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9445.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(10445.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g>',1),un=[rn],kn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"−"),n("mo",{stretchy:"false"},"("),n("mi",null,"e"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e")])],-1),dn={class:"MathJax",jax:"SVG",style:{position:"relative"}},mn={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.074ex",height:"1.692ex",role:"img",focusable:"false",viewBox:"0 -666 4010.9 748","aria-hidden":"true"},vn=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2510.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3510.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g>',1),bn=[vn],hn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mn",null,"2")])],-1),gn={class:"MathJax",jax:"SVG",style:{position:"relative"}},_n={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.781ex",height:"1.52ex",role:"img",focusable:"false",viewBox:"0 -661 345 672","aria-hidden":"true"},Tn=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D456",d:"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"})])])],-1),wn=[Tn],Qn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"i")])],-1),yn={class:"MathJax",jax:"SVG",style:{position:"relative"}},fn={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.724ex",height:"1.681ex",role:"img",focusable:"false",viewBox:"0 -661 3855.9 743","aria-hidden":"true"},Mn=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2510.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3510.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g>',1),xn=[Mn],Ln=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mi",null,"i")])],-1),In={class:"MathJax",jax:"SVG",style:{position:"relative"}},Hn={style:{"vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.852ex",height:"1.808ex",role:"img",focusable:"false",viewBox:"0 -661 2144.6 799","aria-hidden":"true"},Pn=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(1678.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g>',1),Cn=[Pn],Sn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"i"),n("mo",null,"⩽"),n("mi",null,"e")])],-1),zn={class:"MathJax",jax:"SVG",style:{position:"relative"}},jn={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.781ex",height:"1.52ex",role:"img",focusable:"false",viewBox:"0 -661 345 672","aria-hidden":"true"},On=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D456",d:"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"})])])],-1),Zn=[On],Dn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"i")])],-1),qn={class:"MathJax",jax:"SVG",style:{position:"relative"}},Vn={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.372ex",height:"1.505ex",role:"img",focusable:"false",viewBox:"0 -583 5910.4 665","aria-hidden":"true"},Bn=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2510.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3510.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(4254.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5310.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g>',1),Rn=[Bn],An=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mi",null,"e"),n("mo",null,"="),n("mi",null,"n")])],-1),Gn={class:"MathJax",jax:"SVG",style:{position:"relative"}},Nn={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},Wn=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"})])])],-1),En=[Wn],Fn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"n")])],-1),Jn={class:"MathJax",jax:"SVG",style:{position:"relative"}},Un={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},$n=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),Kn=[$n],Xn=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")])],-1),Yn={class:"MathJax",jax:"SVG",style:{position:"relative"}},ns={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.832ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 2577.6 1083.9","aria-hidden":"true"},ss=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),as=[ss],ts=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")])],-1),ps=p(`<h3 id="source-code-1" tabindex="-1"><a class="header-anchor" href="#source-code-1" aria-hidden="true">#</a> Source Code</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>out_of_range<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> merged_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> neighbor_rank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t neighbor_block_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> right_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> right_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> left_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> left_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token comment">// no neighbor</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    MPI_Status status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// neighbor_rank == right_rank</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                 <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>neighbor_block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t skip_count <span class="token operator">=</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token operator">?</span> neighbor_block_len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>j<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>k<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span>
           l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> merged_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merged_data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-2" tabindex="-1"><a class="header-anchor" href="#performance-2" aria-hidden="true">#</a> Performance</h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12511.503000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6816.121000 ms</td><td>1.83557525</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3940.129000 ms</td><td>3.17540441</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2236.570000 ms</td><td>5.59405831</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1402.828000 ms</td><td>8.91877194</td></tr><tr><td>2</td><td>16</td><td>100000000</td><td>969.002000 ms</td><td>12.91174115</td></tr></tbody></table><h2 id="v2" tabindex="-1"><a class="header-anchor" href="#v2" aria-hidden="true">#</a> v2</h2><p>Loop <code>nprocs</code> times + Blocking Communication + Optimized Merge</p><h3 id="optimized-merge" tabindex="-1"><a class="header-anchor" href="#optimized-merge" aria-hidden="true">#</a> Optimized Merge</h3><p>左侧 Worker 从左向右 Merge, 右侧 Worker 从右向左 Merge.</p><h3 id="source-code-2" tabindex="-1"><a class="header-anchor" href="#source-code-2" aria-hidden="true">#</a> Source Code</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> merged_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  MPI_Status status<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>right_block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span>
             l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> neighbor_data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>left_block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
          l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> merged_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merged_data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performace" tabindex="-1"><a class="header-anchor" href="#performace" aria-hidden="true">#</a> Performace</h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12513.623000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6665.909000 ms</td><td>1.8772568</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3712.588000 ms</td><td>3.37059297</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2073.758000 ms</td><td>6.03427353</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1295.445000 ms</td><td>9.65970998</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>851.194000 ms</td><td>14.70125847</td></tr></tbody></table><h2 id="v3" tabindex="-1"><a class="header-anchor" href="#v3" aria-hidden="true">#</a> v3</h2><p>Loop <code>nprocs</code> times + Non-Blocking Communication + Optimized Merge + Lazy Copy</p><h3 id="lazy-copy" tabindex="-1"><a class="header-anchor" href="#lazy-copy" aria-hidden="true">#</a> Lazy Copy</h3><p>不必每次 Merge 后都将 Merge 的结果拷贝到原 <code>data</code> 中, 而是可以使用两个数组交替作为 “旧数据” 和 “新数据”, 只需交换指针即可.</p><h3 id="source-code-3" tabindex="-1"><a class="header-anchor" href="#source-code-3" aria-hidden="true">#</a> Source Code</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> data_copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  MPI_Request requests<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
                <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Irecv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span>right_block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span>
                <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span>
             l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> neighbor_data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
                <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Irecv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span>left_block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span>
                <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
          l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> data_copy<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_copy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-3" tabindex="-1"><a class="header-anchor" href="#performance-3" aria-hidden="true">#</a> Performance</h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12509.441000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6715.725000 ms</td><td>1.86270894</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3682.796000 ms</td><td>3.39672385</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2033.162000 ms</td><td>6.15270254</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1212.278000 ms</td><td>10.31895407</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>797.821000 ms</td><td>15.67950831</td></tr></tbody></table><h2 id="v4" tabindex="-1"><a class="header-anchor" href="#v4" aria-hidden="true">#</a> v4</h2><p>采用类似 Buffered Stream 方式边计算边发送, 即每计算 <code>chunk_size</code> 个 <code>float</code> 后就进行一次 <code>Isend</code>, 使得通信能够尽可能与计算重叠. 其中, <code>send_right_buffer</code> 和 <code>recv_left_buffer</code> 采取逆向存储, 以符合逆向归并的读写顺序. 为了尽可能缩短阻塞通信的时长, 仅在将要使用某一个 buffer 时才对该 buffer 进行 <code>Waitall</code> 确保上一轮通信已完成.</p><h3 id="bandwidth" tabindex="-1"><a class="header-anchor" href="#bandwidth" aria-hidden="true">#</a> Bandwidth</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ srun <span class="token parameter variable">-N</span> <span class="token number">1</span> <span class="token parameter variable">-n</span> <span class="token number">2</span> osu_bw
<span class="token comment"># OSU MPI Bandwidth Test v5.6.3</span>
<span class="token comment"># Size      Bandwidth (MB/s)</span>
<span class="token number">1</span>                       <span class="token number">9.47</span>
<span class="token number">2</span>                      <span class="token number">18.54</span>
<span class="token number">4</span>                      <span class="token number">38.20</span>
<span class="token number">8</span>                      <span class="token number">76.28</span>
<span class="token number">16</span>                    <span class="token number">152.38</span>
<span class="token number">32</span>                    <span class="token number">286.08</span>
<span class="token number">64</span>                    <span class="token number">598.25</span>
<span class="token number">128</span>                   <span class="token number">382.26</span>
<span class="token number">256</span>                   <span class="token number">764.46</span>
<span class="token number">512</span>                  <span class="token number">1518.65</span>
<span class="token number">1024</span>                 <span class="token number">2471.40</span>
<span class="token number">2048</span>                 <span class="token number">3541.91</span>
<span class="token number">4096</span>                 <span class="token number">4986.57</span>
<span class="token number">8192</span>                 <span class="token number">6506.46</span>
<span class="token number">16384</span>                <span class="token number">5481.32</span>
<span class="token number">32768</span>                <span class="token number">7418.92</span>
<span class="token number">65536</span>               <span class="token number">10191.21</span>
<span class="token number">131072</span>              <span class="token number">12052.71</span>
<span class="token number">262144</span>              <span class="token number">12183.31</span>
<span class="token number">524288</span>              <span class="token number">11554.38</span>
<span class="token number">1048576</span>             <span class="token number">11871.98</span>
<span class="token number">2097152</span>             <span class="token number">12109.49</span>
<span class="token number">4194304</span>             <span class="token number">12458.68</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选取 <code>131072</code> 作为 <code>chunk_size</code>.</p><h3 id="source-code-4" tabindex="-1"><a class="header-anchor" href="#source-code-4" aria-hidden="true">#</a> Source Code</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
<span class="token comment">// void PrintData(const float* data, const int count) {</span>
<span class="token comment">//   for (int i = 0; i &lt; count; ++i) printf(&quot;%f, &quot;, data[i]);</span>
<span class="token comment">// }</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MPIStream</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MPIStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_Datatype datatype <span class="token operator">=</span> MPI_FLOAT<span class="token punctuation">,</span>
            MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">datatype_</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comm_</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">target_</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_ <span class="token operator">=</span> <span class="token function">CalcChunkCount</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_ <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_ <span class="token operator">=</span> <span class="token keyword">new</span> MPI_Request<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_ <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">,</span>
              MPI_REQUEST_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token operator">~</span><span class="token function">MPIStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">;</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> T <span class="token function">ReverseGet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">-</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ReversePut</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">-</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  T<span class="token operator">*</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_ <span class="token operator">=</span> <span class="token function">CalcChunkCount</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">CancelAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
      <span class="token function">MPI_Cancel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">MPI_Waitall</span><span class="token punctuation">(</span>
        <span class="token comment">/*count=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">,</span>
        <span class="token comment">/*array_of_requests=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">,</span>
        <span class="token comment">/*array_of_statuses=*/</span>MPI_STATUSES_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">CalcChunkCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">+</span> kChunkSizeMask<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> kLogChunkSize <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> kChunkSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> kChunkSizeMask <span class="token operator">=</span> <span class="token punctuation">(</span>kChunkSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  T<span class="token operator">*</span> data_<span class="token punctuation">;</span>
  MPI_Datatype datatype_<span class="token punctuation">;</span>
  MPI_Comm comm_<span class="token punctuation">;</span>
  MPI_Request<span class="token operator">*</span> requests_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> size_<span class="token punctuation">,</span> chunk_count_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> target_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MPIInStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MPIStream</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MPIInStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_Datatype datatype <span class="token operator">=</span> MPI_FLOAT<span class="token punctuation">,</span>
              MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">MPIStream</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> datatype<span class="token punctuation">,</span> comm<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> chunk_id <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;&gt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>chunk_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Irecv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
      <span class="token comment">// int rank;</span>
      <span class="token comment">// MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span>
      <span class="token comment">// printf(</span>
      <span class="token comment">//     &quot;Irecv rank = %d, buf_pos = %d, count = %d, source = %d, tag =</span>
      <span class="token comment">//     %d\\n&quot;, rank, i &lt;&lt; kLogChunkSize, kChunkSize, this-&gt;target_, i);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token function">MPI_Irecv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">/*count=*/</span>kChunkSize<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>datatype_<span class="token punctuation">,</span>
                <span class="token comment">/*source=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_<span class="token punctuation">,</span>
                <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
                <span class="token comment">/*comm=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>comm_<span class="token punctuation">,</span>
                <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">ConnectSource</span><span class="token punctuation">(</span><span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token comment">/*target=*/</span>source<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kLogChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSizeMask<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MPIOutStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MPIStream</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MPIOutStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_Datatype datatype <span class="token operator">=</span> MPI_FLOAT<span class="token punctuation">,</span>
               MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">MPIStream</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> datatype<span class="token punctuation">,</span> comm<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> count <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
      <span class="token comment">// int rank;</span>
      <span class="token comment">// MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span>
      <span class="token comment">// printf(&quot;Isend rank = %d, buf_pos = %d, count = %d, dest = %d, tag =</span>
      <span class="token comment">// %d\\n&quot;,</span>
      <span class="token comment">//        rank, i &lt;&lt; kLogChunkSize, kChunkSize, this-&gt;target_, i);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span>
          <span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token comment">/*count=*/</span>kChunkSize<span class="token punctuation">,</span>
          <span class="token comment">/*datatype=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>datatype_<span class="token punctuation">,</span>
          <span class="token comment">/*dest=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_<span class="token punctuation">,</span>
          <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
          <span class="token comment">/*comm=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>comm_<span class="token punctuation">,</span>
          <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token class-name">MPIStream</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kChunkSizeMask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> chunk_id <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;&gt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
      <span class="token comment">// int rank;</span>
      <span class="token comment">// MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span>
      <span class="token comment">// printf(&quot;Isend rank = %d, buf_pos = %d, count = %d, dest = %d, tag =</span>
      <span class="token comment">// %d\\n&quot;,</span>
      <span class="token comment">//        rank, chunk_id &lt;&lt; kLogChunkSize, kChunkSize, this-&gt;target_,</span>
      <span class="token comment">//        chunk_id);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span>
          <span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token punctuation">(</span>chunk_id <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token comment">/*count=*/</span>kChunkSize<span class="token punctuation">,</span>
          <span class="token comment">/*datatype=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>datatype_<span class="token punctuation">,</span>
          <span class="token comment">/*dest=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_<span class="token punctuation">,</span>
          <span class="token comment">/*tag=*/</span>chunk_id<span class="token punctuation">,</span>
          <span class="token comment">/*comm=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>comm_<span class="token punctuation">,</span>
          <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>chunk_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token keyword">int</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token comment">/*target=*/</span>dest<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kLogChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSizeMask<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
    <span class="token comment">// printf(&quot;[%d] begin: &quot;, this-&gt;rank);</span>
    <span class="token comment">// for (size_t i = 0; i &lt; this-&gt;block_len; ++i) printf(&quot;%f, &quot;,</span>
    <span class="token comment">// this-&gt;data[i]); printf(&quot;\\n&quot;);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> left_rank <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> right_rank <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> send_left_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIOutStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_left_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_left_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> send_right_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIOutStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> recv_left_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIInStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span>left_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_left_buffer<span class="token punctuation">.</span><span class="token function">ConnectSource</span><span class="token punctuation">(</span><span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span>left_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> recv_right_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIInStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span>right_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_right_buffer<span class="token punctuation">.</span><span class="token function">ConnectSource</span><span class="token punctuation">(</span><span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span>
                                  <span class="token comment">/*size=*/</span>right_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    send_right_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    send_left_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// printf(&quot;!!! Rank = %d, i = %d\\n&quot;, this-&gt;rank, i);</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// recv from right, send to left</span>
      send_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> send_left_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        send_left_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_left_buffer<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_left_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        recv_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        recv_right_buffer<span class="token punctuation">.</span><span class="token function">Irecv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span>
               l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;</span> recv_right_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_right_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_right_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// recv from left, send to right</span>
      send_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> send_right_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        send_right_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_right_buffer<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_right_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        recv_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        recv_left_buffer<span class="token punctuation">.</span><span class="token function">Irecv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> left_block_len <span class="token operator">&amp;&amp;</span>
               l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;</span> recv_left_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_left_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> left_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_left_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">^</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> send_right_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> send_left_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  send_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
  <span class="token comment">// printf(&quot;[%d] end send_left: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(send_left_buffer.Data(), this-&gt;block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
  <span class="token comment">// printf(&quot;[%d] end send_right: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(send_right_buffer.Data(), this-&gt;block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
  <span class="token comment">// printf(&quot;[%d] end recv_left: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(recv_left_buffer.Data(), left_block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
  <span class="token comment">// printf(&quot;[%d] end recv_right: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(recv_right_buffer.Data(), right_block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-4" tabindex="-1"><a class="header-anchor" href="#performance-4" aria-hidden="true">#</a> Performance</h3><p>由于逻辑变得复杂, 效果非常不理想.</p><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12483.309000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>7433.843000 ms</td><td>1.67925379</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>5337.546000 ms</td><td>2.3387731</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>3785.481000 ms</td><td>3.29768106</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>2839.709000 ms</td><td>4.39598177</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>2490.944000 ms</td><td>5.01147717</td></tr></tbody></table><hr class="footnotes-sep">`,31),es={class:"footnotes"},os={class:"footnotes-list"},cs={id:"footnote1",class:"footnote-item"},ls={href:"http://liinwww.ira.uka.de/~thw/vl-hiroshima/slides-4.pdf",target:"_blank",rel:"noopener noreferrer"},is=n("em",null,"Liinwww.ira.uka.de",-1),rs=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),us={id:"footnote2",class:"footnote-item"},ks={href:"http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/nulleinsen.htm",target:"_blank",rel:"noopener noreferrer"},ds=n("em",null,"Iti.fh-flensburg.de",-1),ms=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),vs={id:"footnote3",class:"footnote-item"},bs={href:"http://www.net.t-labs.tu-berlin.de/~stefan/netalg13-9-sort.pdf",target:"_blank",rel:"noopener noreferrer"},hs=n("em",null,"Net.t-labs.tu-berlin.de",-1),gs=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1);function _s(Ts,ws){const e=l("ExternalLinkIcon");return a(),t("div",null,[r,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",u,[s("Odd–even sort - Wikipedia"),o(e)])])]),k,n("p",null,[s("Let "),n("mjx-container",d,[(a(),t("svg",m,b)),h]),s(" be a sequence of data ordered by "),g,s(". The odd-even sort algorithm correctly sorts this data in "),n("mjx-container",_,[(a(),t("svg",T,Q)),y]),s(" passes. (A pass here is defined to be a full sequence of odd-even, or even-odd comparisons. The passes occur in order pass 1: odd–even, pass 2: even–odd, etc.)")]),f,n("p",null,[s("Since the sorting algorithm only involves comparison-swap operations and is oblivious (the order of comparison-swap operations does not depend on the data), by Knuth’s 0-1 sorting principle,"),M,s(" it suffices to check correctness when each "),n("mjx-container",x,[(a(),t("svg",L,H)),P]),s(" is either 0 or 1. Assume that there are "),n("mjx-container",C,[(a(),t("svg",S,j)),O]),s(" 1s.")]),n("p",null,[s("Observe that the rightmost 1 can be either in an even or odd position, so it might not be moved by the first odd-even pass. But after the first odd-even pass, the rightmost 1 will be in an even position. It follows that it will be moved to the right by all remaining passes. Since the rightmost one starts in position greater than or equal to "),n("mjx-container",Z,[(a(),t("svg",D,V)),B]),s(", it must be moved at most "),n("mjx-container",R,[(a(),t("svg",A,N)),W]),s(" steps. It follows that it takes at most "),n("mjx-container",E,[(a(),t("svg",F,U)),$]),s(" passes to move the rightmost 1 to its correct position.")]),n("p",null,[s("Now, consider the second rightmost 1. After two passes, the 1 to its right will have moved right by at least one step. It follows that, for all remaining passes, we can view the second rightmost 1 as the rightmost 1. The second rightmost 1 starts in position at least "),n("mjx-container",K,[(a(),t("svg",X,nn)),sn]),s(" and must be moved to position at most "),n("mjx-container",an,[(a(),t("svg",tn,en)),on]),s(", so it must be moved at most "),n("mjx-container",cn,[(a(),t("svg",ln,un)),kn]),s(" steps. After at most 2 passes, the rightmost 1 will have already moved, so the entry to the right of the second rightmost 1 will be 0. Hence, for all passes after the first two, the second rightmost 1 will move to the right. It thus takes at most "),n("mjx-container",dn,[(a(),t("svg",mn,bn)),hn]),s(" passes to move the second rightmost 1 to its correct position.")]),n("p",null,[s("Continuing in this manner, by induction it can be shown that the "),n("mjx-container",gn,[(a(),t("svg",_n,wn)),Qn]),s("-th rightmost 1 is moved to its correct position in at most "),n("mjx-container",yn,[(a(),t("svg",fn,xn)),Ln]),s(" passes. Since "),n("mjx-container",In,[(a(),t("svg",Hn,Cn)),Sn]),s(", it follows that the "),n("mjx-container",zn,[(a(),t("svg",jn,Zn)),Dn]),s("-th rightmost 1 is moved to its correct position in at most "),n("mjx-container",qn,[(a(),t("svg",Vn,Rn)),An]),s(" passes. The list is thus correctly sorted in "),n("mjx-container",Gn,[(a(),t("svg",Nn,En)),Fn]),s(" passes. QED.")]),n("p",null,[s("We remark that each pass takes "),n("mjx-container",Jn,[(a(),t("svg",Un,Kn)),Xn]),s(" steps, so this algorithm has "),n("mjx-container",Yn,[(a(),t("svg",ns,as)),ts]),s(" complexity.")]),ps,n("section",es,[n("ol",os,[n("li",cs,[n("p",null,[n("a",ls,[s("“Five Lectures on CA”"),o(e)]),s(" (PDF). "),is,s(". Retrieved 2017-07-30. "),rs])]),n("li",us,[n("p",null,[s("Lang, Hans Werner. "),n("a",ks,[s("“The 0-1-principle”"),o(e)]),s(". "),ds,s(". Retrieved 30 July 2017. "),ms])]),n("li",vs,[n("p",null,[n("a",bs,[s("“Distributed Sorting”"),o(e)]),s(" (PDF). "),hs,s(". Retrieved 2017-07-30. "),gs])])])])])}const ys=c(i,[["render",_s],["__file","index.html.vue"]]);export{ys as default};
