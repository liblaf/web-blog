const e=JSON.parse('{"key":"v-53c6454e","path":"/cc/2022/08/11/how-to-filter-jni-interface-in-llvm-ir/","title":"How To Filter JNI Interface in LLVM IR","lang":"en-US","frontmatter":{"lastUpdated":true,"contributors":true,"editLink":true,"category":["C/C++","Java"],"tag":["LLVM","JNI"],"isOriginal":true,"date":"2022-08-11T00:00:00.000Z","permalinkPattern":"cc/:year/:month/:day/:slug","title":"How To Filter JNI Interface in LLVM IR","description":"JNIEnv ( aka const struct JNINativeInterface*, defined in jni.h ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of struct.JNINativeInterface. You can read jni.h for more details.","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/cc/2022/08/11/how-to-filter-jni-interface-in-llvm-ir/"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"How To Filter JNI Interface in LLVM IR"}],["meta",{"property":"og:description","content":"JNIEnv ( aka const struct JNINativeInterface*, defined in jni.h ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of struct.JNINativeInterface. You can read jni.h for more details."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-02-24T05:36:48.000Z"}],["meta",{"property":"article:tag","content":"LLVM"}],["meta",{"property":"article:tag","content":"JNI"}],["meta",{"property":"article:published_time","content":"2022-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-24T05:36:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Filter JNI Interface in LLVM IR\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-24T05:36:48.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Use JNIEnv in C/C++","slug":"use-jnienv-in-c-c","link":"#use-jnienv-in-c-c","children":[]},{"level":2,"title":"How JNIEnv Is Called in LLVM IR","slug":"how-jnienv-is-called-in-llvm-ir","link":"#how-jnienv-is-called-in-llvm-ir","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1677217008000,"contributors":[{"name":"Qin Li","email":"liblaf@outlook.com","commits":1}]},"readingTime":{"minutes":1.64,"words":493},"filePathRelative":"cc/2022-08-11-how-to-filter-jni-interface-in-llvm-ir.md","localizedDate":"August 11, 2022","excerpt":"<p><code>JNIEnv</code> ( aka <code>const struct JNINativeInterface*</code>, defined in <code>jni.h</code> ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of <code>struct.JNINativeInterface</code>. You can read <code>jni.h</code> for more details.</p>","autoDesc":true}');export{e as data};
