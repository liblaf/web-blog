import{_ as n,X as s,Y as a,a1 as e}from"./framework-9435e890.js";const t={},o=e(`<h2 id="linux-types-h" tabindex="-1"><a class="header-anchor" href="#linux-types-h" aria-hidden="true">#</a> &lt;linux/types.h&gt;</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">dev_t</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>dev_t</code> is the type used to represent device numbers within the kernel.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MAJOR</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">MINOR</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Macros that extract the major and minor numbers from a device number.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">dev_t</span> <span class="token function">MKDEV</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> minor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Macro that builds a <code>dev_t</code> data item from the major and minor numbers.</p><h2 id="linux-fs-h" tabindex="-1"><a class="header-anchor" href="#linux-fs-h" aria-hidden="true">#</a> &lt;linux/fs.h&gt;</h2><p>The “filesystem” header is the header required for writing device drivers. Many important functions and data structures are declared in here.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_chrdev_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> first<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> firstminor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> first<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions that allow a driver to allocate and free ranges of device numbers. <code>register_chrdev_region</code> should be used when the desired major number is known in advance; for dynamic allocation, use <code>alloc_chrdev_region</code> instead.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The old (pre-2.6) char device registration routine. It is emulated in the 2.6 kernel but should not be used for new code. If the major number is not 0, it is used unchanged; otherwise a dynamic number is assigned for this device.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">unregister_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Function that undoes a registration made with <code>register_chrdev</code>. Both <code>major</code> and the <code>name</code> string must contain the same values that were used to register the driver.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file_operations</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">file</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">inode</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Three important data structures used by most device drivers. The <code>file_operations</code> structure holds a char driver’s methods; <code>struct file</code> represents an open file, and <code>struct inode</code> represents a file on disk.</p><h2 id="linux-cdev-h" tabindex="-1"><a class="header-anchor" href="#linux-cdev-h" aria-hidden="true">#</a> &lt;linux/cdev.h&gt;</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span><span class="token function">cdev_alloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> num<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for the management of <code>cdev</code> structures, which represent char devices within the kernel.</p><h2 id="linux-kernel-h" tabindex="-1"><a class="header-anchor" href="#linux-kernel-h" aria-hidden="true">#</a> &lt;linux/kernel.h&gt;</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">container_of</span><span class="token punctuation">(</span>pointer<span class="token punctuation">,</span> type<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A convenience macro that may be used to obtain a pointer to a structure from a pointer to some other structure contained within it.</p><h2 id="asm-uaccess-h" tabindex="-1"><a class="header-anchor" href="#asm-uaccess-h" aria-hidden="true">#</a> &lt;asm/uaccess.h&gt;</h2><p>This include file declares functions used by kernel code to move data to and from user space.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_from_user</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_to_user</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Copy data between user space and kernel space.</p>`,27),c=[o];function p(i,d){return s(),a("div",null,c)}const r=n(t,[["render",p],["__file","index.html.vue"]]);export{r as default};
